{"/home/travis/build/npmtest/node-npmtest-localtunnel/test.js":"/* istanbul instrument in package npmtest_localtunnel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-localtunnel/lib.npmtest_localtunnel.js":"/* istanbul instrument in package npmtest_localtunnel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_localtunnel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_localtunnel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-localtunnel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-localtunnel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_localtunnel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_localtunnel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_localtunnel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_localtunnel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_localtunnel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_localtunnel.__dirname + '/lib.npmtest_localtunnel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-localtunnel/node_modules/localtunnel/client.js":"var EventEmitter = require('events').EventEmitter;\nvar debug = require('debug')('localtunnel:client');\n\nvar Tunnel = require('./lib/Tunnel');\n\nmodule.exports = function localtunnel(port, opt, fn) {\n    if (typeof opt === 'function') {\n        fn = opt;\n        opt = {};\n    }\n\n    opt = opt || {};\n    opt.port = port;\n\n    var client = Tunnel(opt);\n    client.open(function(err) {\n        if (err) {\n            return fn(err);\n        }\n\n        fn(null, client);\n    });\n    return client;\n};\n","/home/travis/build/npmtest/node-npmtest-localtunnel/node_modules/localtunnel/lib/Tunnel.js":"var url = require('url');\nvar EventEmitter = require('events').EventEmitter;\nvar request = require('request');\nvar debug = require('debug')('localtunnel:client');\n\nvar TunnelCluster = require('./TunnelCluster');\n\nvar Tunnel = function(opt) {\n    if (!(this instanceof Tunnel)) {\n        return new Tunnel(opt);\n    }\n\n    var self = this;\n    self._closed = false;\n    self._opt = opt || {};\n\n    self._opt.host = self._opt.host || 'https://localtunnel.me';\n};\n\nTunnel.prototype.__proto__ = EventEmitter.prototype;\n\n// initialize connection\n// callback with connection info\nTunnel.prototype._init = function(cb) {\n    var self = this;\n    var opt = self._opt;\n\n    var params = {\n        path: '/',\n        json: true\n    };\n\n    var base_uri = opt.host + '/';\n\n    // optionally override the upstream server\n    var upstream = url.parse(opt.host);\n\n    // no subdomain at first, maybe use requested domain\n    var assigned_domain = opt.subdomain;\n\n    // where to quest\n    params.uri = base_uri + ((assigned_domain) ? assigned_domain : '?new');\n\n    (function get_url() {\n        request(params, function(err, res, body) {\n            if (err) {\n                // TODO (shtylman) don't print to stdout?\n                console.log('tunnel server offline: ' + err.message + ', retry 1s');\n                return setTimeout(get_url, 1000);\n            }\n\n            if (res.statusCode !== 200) {\n                var err = new Error((body && body.message) || 'localtunnel server returned an error, please try again');\n                return cb(err);\n            }\n\n            var port = body.port;\n            var host = upstream.hostname;\n\n            var max_conn = body.max_conn_count || 1;\n\n            cb(null, {\n                remote_host: upstream.hostname,\n                remote_port: body.port,\n                name: body.id,\n                url: body.url,\n                max_conn: max_conn\n            });\n        });\n    })();\n};\n\nTunnel.prototype._establish = function(info) {\n    var self = this;\n    var opt = self._opt;\n    \n    // increase max event listeners so that localtunnel consumers don't get\n    // warning messages as soon as they setup even one listener. See #71\n    self.setMaxListeners(info.max_conn + (EventEmitter.defaultMaxListeners || 10));\n\n    info.local_host = opt.local_host;\n    info.local_port = opt.port;\n\n    var tunnels = self.tunnel_cluster = TunnelCluster(info);\n\n    // only emit the url the first time\n    tunnels.once('open', function() {\n        self.emit('url', info.url);\n    });\n\n    // re-emit socket error\n    tunnels.on('error', function(err) {\n        self.emit('error', err);\n    });\n\n    var tunnel_count = 0;\n\n    // track open count\n    tunnels.on('open', function(tunnel) {\n        tunnel_count++;\n        debug('tunnel open [total: %d]', tunnel_count);\n\n        var close_handler = function() {\n            tunnel.destroy();\n        };\n\n        if (self._closed) {\n            return close_handler();\n        }\n\n        self.once('close', close_handler);\n        tunnel.once('close', function() {\n            self.removeListener('close', close_handler);\n        });\n    });\n\n    // when a tunnel dies, open a new one\n    tunnels.on('dead', function(tunnel) {\n        tunnel_count--;\n        debug('tunnel dead [total: %d]', tunnel_count);\n\n        if (self._closed) {\n            return;\n        }\n\n        tunnels.open();\n    });\n\n    // establish as many tunnels as allowed\n    for (var count = 0 ; count < info.max_conn ; ++count) {\n        tunnels.open();\n    }\n};\n\nTunnel.prototype.open = function(cb) {\n    var self = this;\n\n    self._init(function(err, info) {\n        if (err) {\n            return cb(err);\n        }\n\n        self.url = info.url;\n        self._establish(info);\n        cb();\n    });\n};\n\n// shutdown tunnels\nTunnel.prototype.close = function() {\n    var self = this;\n\n    self._closed = true;\n    self.emit('close');\n};\n\nmodule.exports = Tunnel;\n","/home/travis/build/npmtest/node-npmtest-localtunnel/node_modules/localtunnel/lib/TunnelCluster.js":"var EventEmitter = require('events').EventEmitter;\nvar debug = require('debug')('localtunnel:client');\nvar net = require('net');\n\nvar HeaderHostTransformer = require('./HeaderHostTransformer');\n\n// manages groups of tunnels\nvar TunnelCluster = function(opt) {\n    if (!(this instanceof TunnelCluster)) {\n        return new TunnelCluster(opt);\n    }\n\n    var self = this;\n    self._opt = opt;\n\n    EventEmitter.call(self);\n};\n\nTunnelCluster.prototype.__proto__ = EventEmitter.prototype;\n\n// establish a new tunnel\nTunnelCluster.prototype.open = function() {\n    var self = this;\n\n    var opt = self._opt || {};\n\n    var remote_host = opt.remote_host;\n    var remote_port = opt.remote_port;\n\n    var local_host = opt.local_host || 'localhost';\n    var local_port = opt.local_port;\n\n    debug('establishing tunnel %s:%s <> %s:%s', local_host, local_port, remote_host, remote_port);\n\n    // connection to localtunnel server\n    var remote = net.connect({\n        host: remote_host,\n        port: remote_port\n    });\n\n    remote.setKeepAlive(true);\n\n    remote.on('error', function(err) {\n        // emit connection refused errors immediately, because they\n        // indicate that the tunnel can't be established.\n        if (err.code === 'ECONNREFUSED') {\n            self.emit('error', new Error('connection refused: ' + remote_host + ':' + remote_port + ' (check your firewall settings)'));\n        }\n\n        remote.end();\n    });\n\n    function conn_local() {\n        if (remote.destroyed) {\n            debug('remote destroyed');\n            self.emit('dead');\n            return;\n        }\n\n        debug('connecting locally to %s:%d', local_host, local_port);\n        remote.pause();\n\n        // connection to local http server\n        var local = net.connect({\n            host: local_host,\n            port: local_port\n        });\n\n        function remote_close() {\n            debug('remote close');\n            self.emit('dead');\n            local.end();\n        };\n\n        remote.once('close', remote_close);\n\n        // TODO some languages have single threaded servers which makes opening up\n        // multiple local connections impossible. We need a smarter way to scale\n        // and adjust for such instances to avoid beating on the door of the server\n        local.once('error', function(err) {\n            debug('local error %s', err.message);\n            local.end();\n\n            remote.removeListener('close', remote_close);\n\n            if (err.code !== 'ECONNREFUSED') {\n                return remote.end();\n            }\n\n            // retrying connection to local server\n            setTimeout(conn_local, 1000);\n        });\n\n        local.once('connect', function() {\n            debug('connected locally');\n            remote.resume();\n\n            var stream = remote;\n\n            // if user requested specific local host\n            // then we use host header transform to replace the host header\n            if (opt.local_host) {\n                debug('transform Host header to %s', opt.local_host);\n                stream = remote.pipe(HeaderHostTransformer({ host: opt.local_host }));\n            }\n\n            stream.pipe(local).pipe(remote);\n\n            // when local closes, also get a new remote\n            local.once('close', function(had_error) {\n                debug('local connection closed [%s]', had_error);\n            });\n        });\n    }\n\n    // tunnel is considered open when remote connects\n    remote.once('connect', function() {\n        self.emit('open', remote);\n        conn_local();\n    });\n};\n\nmodule.exports = TunnelCluster;\n","/home/travis/build/npmtest/node-npmtest-localtunnel/node_modules/localtunnel/lib/HeaderHostTransformer.js":"var stream = require('stream');\nvar util = require('util');\n\nvar Transform = stream.Transform;\n\nvar HeaderHostTransformer = function(opts) {\n    if (!(this instanceof HeaderHostTransformer)) {\n        return new HeaderHostTransformer(opts);\n    }\n\n    opts = opts || {}\n    Transform.call(this, opts);\n\n    var self = this;\n    self.host = opts.host || 'localhost';\n    self.replaced = false;\n}\nutil.inherits(HeaderHostTransformer, Transform);\n\nHeaderHostTransformer.prototype._transform = function (chunk, enc, cb) {\n    var self = this;\n\n    // after replacing the first instance of the Host header\n    // we just become a regular passthrough\n    if (!self.replaced) {\n        chunk = chunk.toString();\n        self.push(chunk.replace(/(\\r\\n[Hh]ost: )\\S+/, function(match, $1) {\n            self.replaced = true;\n            return $1 + self.host;\n        }));\n    }\n    else {\n        self.push(chunk);\n    }\n\n    cb();\n};\n\nmodule.exports = HeaderHostTransformer;\n"}